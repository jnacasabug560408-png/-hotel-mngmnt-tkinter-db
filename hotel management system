import csv
import os
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from tkcalendar import DateEntry
from PIL import Image, ImageTk
import mysql.connector


# ========== FILE SETTINGS ==========
CSV_FILE = "hotel_inventory.csv"
COLUMNS = ("Item", "Category", "Quantity", "Unit Price (‚Ç±)", "Total Value (‚Ç±)")


class InventoryApp:
    def __init__(self, root, role="admin"):
        self.root = root
        self.root.title("Hotel Inventory Management System")
        self.root.geometry("1400x780+50+20")
        self.root.configure(bg="white")
        self.connect_db()


        # Data storage
        self.inventory = []
        self.customers = []
        self.bookings = []
        self.rooms = []
        self.details = []

        # Build UI
        self._build_header()
        self._build_sidebar()
        self._build_content()
        self._build_menu()
        self.show_details()
        self.load_from_csv()

# ====== DB CONNECTION ======
    def connect_db(self):
        try:
            self.conn = mysql.connector.connect(
                host="localhost",
                user="root",
                password="",  # leave blank if no password
                database="hotel_db"
            )
            self.cursor = self.conn.cursor()
            print("‚úÖ Connected to MySQL Database")
        except Exception as e:
            messagebox.showerror("Database Error", f"Connection failed:\n{e}")
            self.conn = None
            self.cursor = None
    
    # ====== HEADER ======
    def _build_header(self):
        header = tk.Frame(self.root, bg="#0a3d62", height=65)
        header.pack(side="top", fill="x")
        tk.Label(
            header, text="üè® HOTEL MANAGEMENT SYSTEM",
            bg="#0a3d62", fg="white", font=("Arial", 20, "bold")
        ).pack(pady=10)

    # ====== SIDEBAR ======
    def _build_sidebar(self):
        sidebar = tk.Frame(self.root, bg="#0a3d62", width=210)
        sidebar.pack(side="left", fill="y")

        tk.Label(
            sidebar, text="üè® GRAND HOTEL",
            font=("Arial", 14, "bold"), bg="#0a3d62", fg="#f6b93b"
        ).pack(pady=(30, 30))

        buttons = [
            ("Customer", self.show_customer),
            ("Booking", self.show_booking),
            ("Inventory", self.show_inventory),
            ("Rooms", self.show_rooms),
            ("Details", self.show_details),
            ("Logout", self.root.quit)
        ]

        for text, cmd in buttons:
            tk.Button(
                sidebar, text=text, command=cmd,
                font=("Arial", 12, "bold"), bg="#3c6382", fg="white",
                relief="flat", width=16, pady=6
            ).pack(pady=6)

    # ====== MAIN CONTENT ======
    def _build_content(self):
        self.content = tk.Frame(self.root)
        self.content.pack(side="left", fill="both", expand=True)
        tk.Label(
            self.content,
            text="Welcome to the Grand Hotel Management ",
            font=("Brush Script MT", 18, "bold"),
            fg="#2c3e50",
        ).pack(pady=20)

         #  BACKGROUND IMAGE 
        try:
            from PIL import Image, ImageTk
            self.original_bg = Image.open("banner.jpg")
            self.bg_photo = ImageTk.PhotoImage(self.original_bg)

            self.bg_label = tk.Label(self.content, image=self.bg_photo, bg="white")
            self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)
            self.bg_label.lower()  # Send image behind everything

            # Function to resize background automatically
            def resize_bg(event):
                width = max(event.width, 1)
                height = max(event.height, 1)
                resized = self.original_bg.resize((width, height), Image.LANCZOS)
                self.bg_photo = ImageTk.PhotoImage(resized)
                self.bg_label.config(image=self.bg_photo)
                self.bg_label.image = self.bg_photo

            self.content.bind("<Configure>", resize_bg)

        except Exception as e:
            print(f"Background error: {e}")

    # ====== MENU BAR ======
    def _build_menu(self):
        menubar = tk.Menu(self.root)
        file_menu = tk.Menu(menubar, tearoff=0)
        file_menu.add_command(label="Export Data", command=self.export_as)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.root.quit)
        menubar.add_cascade(label="File", menu=file_menu)
        self.root.config(menu=menubar)

    # ====== CLEAR CONTENT ======
    def clear_content(self):
        for widget in self.content.winfo_children():
            widget.destroy()



 # =================== SHOW DETAILS PAGE ===================
    def show_details(self):
        # Clear previous content
        for widget in self.content.winfo_children():
            widget.destroy()

        # Title
        tk.Label(
            self.content,
            text="üìä System Details Summary",
            bg="#f6b93b",
            fg="#0a3d62",
            font=("Arial", 18, "bold")
        ).pack(pady=15)

        # Persistent frame for stats cards
        self.stats_frame = tk.Frame(self.content, bg="#f6b93b", padx=40, pady=40)
        self.stats_frame.pack(fill="both", expand=True)

        # Robust get_total method
        def get_total_safe(table_name):
            try:
                # Check if table exists
                self.cursor.execute("SHOW TABLES LIKE %s", (table_name,))
                if not self.cursor.fetchone():
                    print(f"Warning: Table '{table_name}' does not exist.")
                    return 0
                # Fetch count
                self.cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                return self.cursor.fetchone()[0]
            except Exception as e:
                print(f"Error fetching total from '{table_name}':", e)
                return 0

        # Refresh totals and update cards
        def refresh_totals():
            if not self.stats_frame.winfo_exists():  # Frame still exists
                return

            # Clear old cards
            for widget in self.stats_frame.winfo_children():
                widget.destroy()

            # Update totals
            total_customers = get_total_safe("customers")
            total_bookings = get_total_safe("booking")       # <-- update with actual table name
            total_inventory = get_total_safe("inventory")
            total_rooms = get_total_safe("room_list")        # <-- update with actual table name

            print("Debug totals:", total_customers, total_bookings, total_inventory, total_rooms)

            # Stats cards
            stats = [
                ("üë§ Customers", total_customers, "#3498db"),
                ("üóìÔ∏è Bookings", total_bookings, "#2ecc71"),
                ("üì¶ Inventory", total_inventory, "#f39c12"),
                ("üõèÔ∏è Rooms", total_rooms, "#e74c3c")
            ]

            for i, (label, value, color) in enumerate(stats):
                card = tk.Frame(self.stats_frame, bg=color, width=200, height=120)
                card.grid(row=0, column=i, padx=25, pady=25, ipadx=20, ipady=20)
                card.grid_propagate(False)

                tk.Label(card, text=label, font=("Arial", 14, "bold"), bg=color, fg="white").pack(pady=(10, 5))
                tk.Label(card, text=value, font=("Arial", 22, "bold"), bg=color, fg="white").pack()

            # Auto-refresh every 10 seconds
            self.content.after(10000, refresh_totals)

        # Call it once to display
        refresh_totals()


    # ===================== INVENTORY =====================
    def show_inventory(self):
        self.clear_content()
        tk.Label(self.content, text="üì¶ Inventory Management",
                  bg="#f6b93b", fg="#0a3d62",
                 font=("Arial", 18, "bold")).pack(pady=15)

        frame = tk.Frame(self.content, bg="#f6b93b", padx=40, pady=40)
        frame.pack(fill="both", expand=True)
        
        # ==== VARIABLES ====
        self.item_name_var = tk.StringVar()
        self.category_var = tk.StringVar()
        self.quantity_var = tk.StringVar()
        self.unit_price_var = tk.StringVar()

        # Initialize inventory list if not yet existing
        if not hasattr(self, "inventory"):
            self.inventory = []

        from tkinter import ttk

    # ==== INPUT FIELDS ====
        fields = [
            ("Item Name:", self.item_name_var),
            ("Category:", self.category_var),
            ("Quantity:", self.quantity_var),
            ("Unit Price (‚Ç±):", self.unit_price_var)
        ]

        for i, (label, var) in enumerate(fields):
            tk.Label(frame, text=label, font=("Arial", 12, "bold"),
                     bg="white", fg="#0a3d62").grid(row=i, column=0, sticky="w", padx=(5, 2), pady=5)

            if label == "Item Name:":
                cb = ttk.Combobox(frame, textvariable=var, width=29,
                              values=["Towel", "Toothbrush", "Toothpaste", "Soap", "Shampoo", "Detergent", "Trash Bags", "Vacuum Cleaner", "Hangers", "Laundry Bag", "Alarm Clock", "Hair Dryer", "Bed Sheet", "Pillow", "Bathrobe", "Tissue Box","Slippers"])
            elif label == "Category:":
                cb = ttk.Combobox(frame, textvariable=var, width=29,
                              values=["Toiletries", "Cleaning", "Equipment", "Bedding", "Bathroom"])
            elif label == "Quantity:":
                cb = ttk.Combobox(frame, textvariable=var, width=29,
                              values=["1", "5", "10", "20", "50", "100"])
            elif label == "Unit Price (‚Ç±):":
                cb = ttk.Combobox(frame, textvariable=var, width=29,
                              values=["50", "100", "150", "200", "250", "300"])
            cb['state'] = 'readonly'
            cb.grid(row=i, column=1, sticky="w", padx=(2, 5), pady=5)

    # ==== BUTTONS ====
        btn_frame = tk.Frame(frame, bg="white")
        btn_frame.grid(row=4, column=1, pady=10, sticky="w", padx=(0, 120))
        tk.Button(btn_frame, text="Add", command=self.add_inventory_item,
                  bg="#f6b93b", fg="black", width=14).pack(side="left", padx=(0, 10))
        tk.Button(btn_frame, text="Update", command=self.update_inventory_item,
                  bg="#60a3bc", fg="white", width=14).pack(side="left", padx=(0, 10))
        tk.Button(btn_frame, text="Delete", command=self.delete_inventory_item,
                  bg="#eb2f06", fg="white", width=14).pack(side="left")

    # ==== TABLE ====
        self.inventory_tree = ttk.Treeview(frame, columns=COLUMNS, show="headings")
        for col in COLUMNS:
            self.inventory_tree.heading(col, text=col)
            self.inventory_tree.column(col, width=170)
        self.inventory_tree.grid(row=5, column=0, columnspan=2, sticky="nsew", pady=10)

        frame.grid_rowconfigure(5, weight=1)
        frame.grid_columnconfigure(1, weight=1)

        self.inventory_tree.bind("<<TreeviewSelect>>", self.load_selected_inventory)
        self.refresh_inventory_table()


    def add_inventory_item(self):
        item = self.item_name_var.get().strip()
        cat = self.category_var.get().strip()
        qty_val = self.quantity_var.get().strip()
        price_val = self.unit_price_var.get().strip()

        if not item or not cat or not qty_val or not price_val:
            messagebox.showerror("Error", "All fields are required.")
            return

        try:
            qty = int(qty_val)
            price = float(price_val)
        except ValueError:
            messagebox.showerror("Error", "Quantity and Price must be numbers.")
            return

        total = qty * price

        # Save to MySQL
        try:
            self.cursor.execute(
                "INSERT INTO inventory (item_name, category, quantity, unit_price) VALUES (%s, %s, %s, %s)",
                (item, cat, qty, price)
            )
            self.conn.commit()
            messagebox.showinfo("Success", "Item added!")
            self.refresh_inventory_table()
            self.clear_inventory_form()
        except Exception as e:
            messagebox.showerror("Database Error", str(e))


    def update_inventory_item(self):
        # Check if an item is selected
        sel = self.inventory_tree.selection()
        if not sel:
            messagebox.showwarning("Warning", "Select an item first.")
            return

        # Get the selected item's name
        values = self.inventory_tree.item(sel[0], "values")
        item_name = values[0]

        # Validate quantity and unit price input
        try:
            qty = int(self.quantity_var.get())
            price = float(self.unit_price_var.get())
        except ValueError:
            messagebox.showerror("Input Error", "Quantity and Unit Price must be numbers.")
            return

        # Calculate total value
        total = qty * price

        # Attempt to update the database
        try:
            self.cursor.execute(
                "UPDATE inventory SET category=%s, quantity=%s, unit_price=%s, total_value=%s WHERE item_name=%s",
                (self.category_var.get(), qty, price, total, item_name)
            )
            self.conn.commit()
            messagebox.showinfo("Success", "Item updated successfully!")
        
            # Refresh the table and clear the form
            self.refresh_inventory_table()
            self.clear_inventory_form()

        except Exception as e:
            messagebox.showerror("Database Error", str(e))



    def delete_inventory_item(self):
        sel = self.inventory_tree.selection()
        if not sel:
            messagebox.showwarning("Warning", "Select an item first.")
            return

        selected_item = self.inventory_tree.item(sel[0])['values'][0]  # get item name
        try:
            self.cursor.execute("DELETE FROM inventory WHERE item_name = %s", (selected_item,))
            self.conn.commit()
            messagebox.showinfo("Deleted", "Item removed from database.")
            self.refresh_inventory_table()
            self.clear_inventory_form()
        except Exception as e:
            messagebox.showerror("Database Error", str(e))



    def refresh_inventory_table(self):
        for row in self.inventory_tree.get_children():
            self.inventory_tree.delete(row)

        self.cursor.execute("SELECT * FROM inventory")
        rows = self.cursor.fetchall()

        for row in rows:
            item_name, category, quantity, unit_price = row[1], row[2], row[3], row[4]
            total_value = quantity * unit_price
            self.inventory_tree.insert("", "end", values=(
            item_name, category, quantity, f"{unit_price:.2f}", f"{total_value:.2f}"
        ))



    def load_selected_inventory(self, event):
        sel = self.inventory_tree.selection()
        if sel:
            idx = self.inventory_tree.index(sel[0])
            item = self.inventory[idx]
            self.item_name_var.set(item["Item"])
            self.category_var.set(item["Category"])
            self.quantity_var.set(item["Quantity"])
            self.unit_price_var.set(item["Unit Price (‚Ç±)"])


    def clear_inventory_form(self):
        for var in [self.item_name_var, self.category_var, self.quantity_var, self.unit_price_var]:
            var.set("")

    # ===================== CUSTOMER =====================

    def show_customer(self):
        self.clear_content()
        tk.Label(self.content, text="üë§ Customer Management",
             fg="#0a3d62", bg="#f6b93b",
             font=("Arial", 18, "bold")).pack(pady=15)

        frame = tk.Frame(self.content, bg="#f6b93b", padx=40, pady=40)
        frame.pack(fill="both", expand=True)

        # Variables
        self.cust_name = tk.StringVar()
        self.cust_email = tk.StringVar()
        self.cust_phone = tk.StringVar()

        # Input fields
        fields = [("Name:", self.cust_name), ("Email:", self.cust_email), ("Phone:", self.cust_phone)]
        for i, (label, var) in enumerate(fields):
            tk.Label(frame, text=label, bg="white", fg="#0a3d62",
                    font=("Arial", 12, "bold")).grid(row=i, column=0, sticky="w", padx=(5, 2), pady=5)
            tk.Entry(frame, textvariable=var, width=32).grid(row=i, column=1, sticky="w", padx=(2, 5), pady=5)

        # Buttons
        btn_frame = tk.Frame(frame, bg="white")
        btn_frame.grid(row=3, column=1, pady=10, sticky="w")
        tk.Button(btn_frame, text="Add", command=self.add_customer,
                bg="#f6b93b", fg="black", width=14).pack(side="left", padx=(0, 10))
        tk.Button(btn_frame, text="Update", command=self.update_customer,
                bg="#1e90ff", fg="white", width=14).pack(side="left", padx=(0,10))
        tk.Button(btn_frame, text="Delete", command=self.delete_customer,
                bg="#eb2f06", fg="white", width=14).pack(side="left")

        # Treeview
        self.customer_tree = ttk.Treeview(frame, columns=("ID", "Name", "Email", "Phone"), show="headings")
        for col in ("ID", "Name", "Email", "Phone"):
            self.customer_tree.heading(col, text=col)
            self.customer_tree.column(col, width=150)
        self.customer_tree.grid(row=4, column=0, columnspan=2, sticky="nsew", pady=10)

        frame.grid_rowconfigure(4, weight=1)
        frame.grid_columnconfigure(1, weight=1)

        # Bind selection
        self.customer_tree.bind("<ButtonRelease-1>", self.load_selected_customer)

        self.refresh_customers_table()


    def refresh_customers_table(self):
        for row in self.customer_tree.get_children():
            self.customer_tree.delete(row)
        self.cursor.execute("SELECT id, full_name, email, phone FROM customers")
        for row in self.cursor.fetchall():
            self.customer_tree.insert("", "end", values=row)


    def add_customer(self):
        name, email, phone = self.cust_name.get().strip(), self.cust_email.get().strip(), self.cust_phone.get().strip()
        if not name or not email or not phone:
            messagebox.showerror("Error", "All fields are required.")
            return
        try:
            self.cursor.execute("INSERT INTO customers (full_name, email, phone) VALUES (%s, %s, %s)",
                            (name, email, phone))
            self.conn.commit()
            messagebox.showinfo("Success", "Customer added!")
            self.refresh_customers_table()
            self.clear_customer_form()
        except Exception as e:
            messagebox.showerror("DB Error", str(e))


    def update_customer(self):
        sel = self.customer_tree.selection()
        if not sel:
            messagebox.showwarning("Select", "Select a customer to update.")
            return
        customer_id = self.customer_tree.item(sel[0])['values'][0]
        name, email, phone = self.cust_name.get().strip(), self.cust_email.get().strip(), self.cust_phone.get().strip()
        if not name or not email or not phone:
            messagebox.showerror("Error", "All fields are required.")
            return
        try:
            self.cursor.execute("UPDATE customers SET full_name=%s, email=%s, phone=%s WHERE id=%s",
                            (name, email, phone, customer_id))
            self.conn.commit()
            messagebox.showinfo("Success", "Customer updated!")
            self.refresh_customers_table()
            self.clear_customer_form()
        except Exception as e:
            messagebox.showerror("DB Error", str(e))


    def delete_customer(self):
        sel = self.customer_tree.selection()
        if not sel:
            messagebox.showwarning("Select", "Select a customer to delete.")
            return
        customer_id = self.customer_tree.item(sel[0])['values'][0]
        confirm = messagebox.askyesno("Confirm", "Delete this customer?")
        if not confirm:
            return
        try:
            self.cursor.execute("DELETE FROM customers WHERE id=%s", (customer_id,))
            self.conn.commit()
            messagebox.showinfo("Deleted", "Customer removed!")
            self.refresh_customers_table()
            self.clear_customer_form()
        except Exception as e:
            messagebox.showerror("DB Error", str(e))


    def clear_customer_form(self):
        self.cust_name.set("")
        self.cust_email.set("")
        self.cust_phone.set("")


    def load_selected_customer(self, event):
        sel = self.customer_tree.selection()
        if sel:
            row = self.customer_tree.item(sel[0])['values']
            self.cust_name.set(row[1])
            self.cust_email.set(row[2])
            self.cust_phone.set(row[3])

    # ===================== BOOKING =====================
    def show_booking(self):
        self.clear_content()
        tk.Label(self.content, text="üìÖ Booking Management",
                 fg="#0a3d62", bg="#f6b93b", font=("Arial", 18, "bold")).pack(pady=15)

        frame = tk.Frame(self.content, bg="#f6b93b", padx=40, pady=40)
        frame.pack(fill="both", expand=True)

        self.booking_cust, self.booking_room = tk.StringVar(), tk.StringVar()
        self.booking_checkin, self.booking_checkout = tk.StringVar(), tk.StringVar()

        tk.Label(frame, text="Customer Name:", bg="white", fg="#0a3d62", font=("Arial", 12, "bold"))\
            .grid(row=0, column=0, sticky="w", padx=(5, 2), pady=5)
        ttk.Combobox(frame, textvariable=self.booking_cust,
                     values=[c["Name"] for c in self.customers], width=30)\
            .grid(row=0, column=1, sticky="w", padx=(2, 5), pady=5)

        tk.Label(frame, text="Room Type:", bg="white", fg="#0a3d62", font=("Arial", 12, "bold"))\
            .grid(row=1, column=0, sticky="w", padx=(5, 2), pady=5)
        ttk.Combobox(frame, textvariable=self.booking_room,
                     values=["Single", "Double", "Suite"], width=30)\
            .grid(row=1, column=1, sticky="w", padx=(2, 5), pady=5)

        tk.Label(frame, text="Check-in Date:", bg="white", fg="#0a3d62", font=("Arial", 12, "bold"))\
            .grid(row=2, column=0, sticky="w", padx=(5, 2), pady=5)
        DateEntry(frame, textvariable=self.booking_checkin, width=28, background="#f6b93b")\
            .grid(row=2, column=1, sticky="w", padx=(2, 5), pady=5)

        tk.Label(frame, text="Check-out Date:", bg="white", fg="#0a3d62", font=("Arial", 12, "bold"))\
            .grid(row=3, column=0, sticky="w", padx=(5, 2), pady=5)
        DateEntry(frame, textvariable=self.booking_checkout, width=28, background="#f6b93b")\
            .grid(row=3, column=1, sticky="w", padx=(2, 5), pady=5)

        btn_frame = tk.Frame(frame, bg="white")
        btn_frame.grid(row=4, column=1, pady=(8, 5), sticky="w")  # align under input fields

        tk.Button(btn_frame, text="Add", command=self.add_booking,
              bg="#f6b93b", fg="black", width=12)\
        .pack(side="left", padx=(0, 10))
        tk.Button(btn_frame, text="Delete", command=self.delete_booking,
              bg="#eb2f06", fg="white", width=12)\
        .pack(side="left")



        cols = ("Customer", "Room", "Check-in", "Check-out")
        self.booking_tree = ttk.Treeview(frame, columns=cols, show="headings")
        for c in cols:
            self.booking_tree.heading(c, text=c)
            self.booking_tree.column(c, width=190)
        self.booking_tree.grid(row=5, column=0, columnspan=2, sticky="nsew", pady=10)
        frame.grid_rowconfigure(5, weight=1)
        frame.grid_columnconfigure(1, weight=1)
        self.refresh_booking_table()

    def add_booking(self):
        c, r, i, o = self.booking_cust.get(), self.booking_room.get(), self.booking_checkin.get(), self.booking_checkout.get()
        if not c or not r or not i or not o:
            messagebox.showerror("Error", "All fields required.")
            return
        self.bookings.append({"Customer": c, "Room": r, "Check-in": i, "Check-out": o})
        self.refresh_booking_table()

    def delete_booking(self):
        sel = self.booking_tree.selection()
        if not sel:
            messagebox.showwarning("Warning", "Select a booking.")
            return
        idx = self.booking_tree.index(sel[0])
        del self.bookings[idx]
        self.refresh_booking_table()

    def refresh_booking_table(self):
        for r in self.booking_tree.get_children():
            self.booking_tree.delete(r)
        for b in self.bookings:
            self.booking_tree.insert("", "end", values=(b["Customer"], b["Room"], b["Check-in"], b["Check-out"]))

    # ===================== ROOMS =====================
    def show_rooms(self):
        self.clear_content()
        tk.Label(self.content, text="üõèÔ∏è Room Management", fg="#0a3d62",
                  bg="#f6b93b", font=("Arial", 18, "bold")).pack(pady=15)

        frame = tk.Frame(self.content, bg="#f6b93b", padx=40, pady=40)
        frame.pack(fill="both", expand=True)
        from tkinter import ttk

    # ==== VARIABLES ====
        self.room_number = tk.StringVar()
        self.room_type = tk.StringVar()
        self.room_status = tk.StringVar()

    # ==== ROOM NUMBER ====
        tk.Label(frame, text="Room Number:", bg="white", fg="#0a3d62",
             font=("Arial", 12, "bold")).grid(row=0, column=0, sticky="w", padx=(5, 2), pady=5)
        ttk.Combobox(frame, textvariable=self.room_number, width=30,
                 values=["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"])\
        .grid(row=0, column=1, sticky="w", padx=(2, 5), pady=5)

    # ==== ROOM TYPE ====
        tk.Label(frame, text="Room Type:", bg="white", fg="#0a3d62",
             font=("Arial", 12, "bold")).grid(row=1, column=0, sticky="w", padx=(5, 2), pady=5)
        ttk.Combobox(frame, textvariable=self.room_type, width=30,
                 values=["Single", "Double", "Suite", "Deluxe", "Family"])\
        .grid(row=1, column=1, sticky="w", padx=(2, 5), pady=5)

    # ==== STATUS ====
        tk.Label(frame, text="Status:", bg="white", fg="#0a3d62",
             font=("Arial", 12, "bold")).grid(row=2, column=0, sticky="w", padx=(5, 2), pady=5)
        ttk.Combobox(frame, textvariable=self.room_status,
                 values=["Available", "Occupied", "Maintenance"], width=30, state="readonly")\
        .grid(row=2, column=1, sticky="w", padx=(2, 5), pady=5)

        # ==== BUTTONS ====
        btn_frame = tk.Frame(frame, bg="white")
        btn_frame.grid(row=3, column=1, sticky="w", pady=(8, 5))

        tk.Button(btn_frame, text="Add", command=self.add_room,
              bg="#f6b93b", fg="black", width=12).pack(side="left", padx=(0, 10))
        tk.Button(btn_frame, text="Update", command=self.update_room,
              bg="#60a3bc", fg="white", width=12).pack(side="left", padx=(0, 10))
        tk.Button(btn_frame, text="Delete", command=self.delete_room,
              bg="#eb2f06", fg="white", width=12).pack(side="left")

        # ==== TABLE ====
        cols = ("Number", "Type", "Status")
        self.room_tree = ttk.Treeview(frame, columns=cols, show="headings")
        for c in cols:
            self.room_tree.heading(c, text=c)
            self.room_tree.column(c, width=200)
        self.room_tree.grid(row=4, column=0, columnspan=2, sticky="nsew", pady=10)

        frame.grid_rowconfigure(4, weight=1)
        frame.grid_columnconfigure(1, weight=1)

        # Bind select event
        self.room_tree.bind("<<TreeviewSelect>>", self.load_selected_room)

        # Initialize list if not yet created
        if not hasattr(self, "rooms"):
            self.rooms = []

        self.refresh_room_table()


    def add_room(self):
        n, t, s = self.room_number.get().strip(), self.room_type.get().strip(), self.room_status.get().strip()
        if not n or not t or not s:
            messagebox.showerror("Error", "All fields are required.")
            return
        self.rooms.append({"Number": n, "Type": t, "Status": s})
        self.refresh_room_table()
        self.clear_room_form()


    def update_room(self):
        sel = self.room_tree.selection()
        if not sel:
            messagebox.showwarning("Warning", "Select a room to update.")
            return
        idx = self.room_tree.index(sel[0])
        n, t, s = self.room_number.get().strip(), self.room_type.get().strip(), self.room_status.get().strip()
        if not n or not t or not s:
            messagebox.showerror("Error", "All fields are required.")
            return
        self.rooms[idx] = {"Number": n, "Type": t, "Status": s}
        self.refresh_room_table()
        self.clear_room_form()


    def delete_room(self):
        sel = self.room_tree.selection()
        if not sel:
            messagebox.showwarning("Warning", "Select a room to delete.")
            return
        idx = self.room_tree.index(sel[0])
        del self.rooms[idx]
        self.refresh_room_table()
        self.clear_room_form()


    def refresh_room_table(self):
        for r in self.room_tree.get_children():
           self.room_tree.delete(r)
        for data in self.rooms:
           self.room_tree.insert("", "end", values=(data["Number"], data["Type"], data["Status"]))


    def load_selected_room(self, event):
        sel = self.room_tree.selection()
        if sel:
            idx = self.room_tree.index(sel[0])
            room = self.rooms[idx]
            self.room_number.set(room["Number"])
            self.room_type.set(room["Type"])
            self.room_status.set(room["Status"])


    def clear_room_form(self):
        self.room_number.set("")
        self.room_type.set("")
        self.room_status.set("")


   

   # ================== MAIN PROGRAM ==================
if __name__ == "__main__":

    def run_main_app(role):
        main_root = tk.Tk()
        app = InventoryApp(main_root, role=role)
        main_root.mainloop()

    def run_login():
        login_root = tk.Tk()
        login_root.title("Hotel Inventory System - Login")
        login_root.geometry("400x500")
        login_root.configure(bg="#0a3d62")

        try:
            img = Image.open("logo.png")  # Make sure this file exists
            img = img.resize((150, 150))
            logo_img = ImageTk.PhotoImage(img)
            logo_label = tk.Label(login_root, image=logo_img, bg="#f5f5f5")
            logo_label.image = logo_img  # keep reference
            logo_label.pack(pady=20)
        except Exception as e:
            print(f"Error loading image: {e}")
            
        # Title
        title_label = tk.Label(login_root, text="Hotel Inventory Management",
                                font=("Arial", 14, "bold"), bg="#0a3d62", fg="#f6b93b")
        title_label.pack(pady=20)

        # Username
        label_username = tk.Label(login_root, text="Username", font=("Arial", 12, "bold"),
                                  bg="#0a3d62", fg="white")
        label_username.pack(pady=(10, 0))
        entry_username = tk.Entry(login_root, font=("Arial", 12), width=25)
        entry_username.pack(pady=5)

        # Password
        label_password = tk.Label(login_root, text="Password", font=("Arial", 12, "bold"),
                                  bg="#0a3d62", fg="white")
        label_password.pack(pady=(10, 0))
        entry_password = tk.Entry(login_root, font=("Arial", 12), width=25, show="*")
        entry_password.pack(pady=5)

        

        def check_login():
            username = entry_username.get()
            password = entry_password.get()
            if username == "admin" and password == "1234":
                messagebox.showinfo("Login Success", "Welcome, Admin!")
                login_root.destroy()
                run_main_app(role="admin")
            elif username == "staff" and password == "5678":
                messagebox.showinfo("Login Success", "Welcome, Staff!")
                login_root.destroy()
                run_main_app(role="staff")
            else:
                messagebox.showerror("Login Failed", "Invalid Username or Password")

        login_btn = tk.Button(login_root, text="Login", font=("Arial", 14, "bold"),
                              bg="#f6b93b", fg="#0a3d62", width=15, command=check_login)
        login_btn.pack(pady=20)

        login_root.mainloop()

    run_login()
